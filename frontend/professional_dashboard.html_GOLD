<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Trading Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'SF Mono', 'Monaco', 'Courier New', monospace;
            background: #000000;
            color: #00ff00;
            padding: 10px;
            font-size: 12px;
        }

        .header {
            background: #0a0a0a;
            padding: 15px;
            border: 1px solid #00ff00;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 18px;
            color: #00ff00;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .sound-toggle {
            background: #003300;
            color: #00ff00;
            border: 1px solid #00ff00;
            padding: 8px 16px;
            cursor: pointer;
            font-weight: bold;
            font-family: inherit;
            border-radius: 3px;
            font-size: 12px;
        }

        .sound-toggle:hover {
            background: #004400;
        }

        .sound-toggle.active {
            background: #00ff00;
            color: #000;
        }

        .notification-status {
            font-size: 10px;
            color: #ffff00;
            padding: 4px 8px;
            border: 1px solid #ffff00;
            border-radius: 3px;
            cursor: pointer;
        }

        .notification-status.enabled {
            color: #00ff00;
            border-color: #00ff00;
        }

        .market-time {
            font-size: 14px;
            color: #ffff00;
        }

        .market-status {
            font-size: 12px;
            padding: 4px 10px;
            border-radius: 3px;
            font-weight: bold;
        }

        .market-status.open {
            background: #00ff00;
            color: #000;
        }

        .market-status.closed {
            background: #ff0000;
            color: #fff;
        }

        .update-indicator {
            font-size: 10px;
            color: #666;
            padding: 4px 8px;
            border-radius: 3px;
        }

        .update-indicator.updating {
            color: #ffff00;
            animation: pulse 1s infinite;
        }

        .watchlist-info {
            font-size: 10px;
            color: #00ccff;
            padding: 4px 8px;
            border: 1px solid #00ccff;
            border-radius: 3px;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .table-container {
            overflow-x: auto;
            border: 1px solid #00ff00;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: #0a0a0a;
        }

        th {
            background: #001a00;
            color: #00ff00;
            padding: 8px 6px;
            text-align: left;
            font-size: 10px;
            text-transform: uppercase;
            border: 1px solid #00ff00;
            white-space: nowrap;
        }

        td {
            padding: 6px;
            border: 1px solid #003300;
            font-size: 11px;
            white-space: nowrap;
            transition: background-color 0.3s ease;
        }

        tr:hover {
            background: #001a00;
        }

        .value-changed {
            animation: flashValue 0.5s ease-in-out;
        }

        @keyframes flashValue {
            0%, 100% { background-color: transparent; }
            50% { background-color: #1a3300; }
        }

        .alert-changed {
            animation: flashAlert 1s ease-in-out 2;
        }

        @keyframes flashAlert {
            0%, 100% { 
                box-shadow: 0 0 0px rgba(255, 255, 0, 0);
            }
            50% { 
                box-shadow: 0 0 15px rgba(255, 255, 0, 0.8);
            }
        }

        .symbol {
            font-weight: bold;
            font-size: 14px;
            color: #ffffff;
        }

        .price {
            font-weight: bold;
            color: #ffff00;
        }

        .bullish {
            color: #00ff00;
            font-weight: bold;
        }

        .bearish {
            color: #ff0000;
            font-weight: bold;
        }

        .neutral {
            color: #888888;
        }

        .alert-buy {
            background: #003300;
            color: #00ff00;
            padding: 4px 8px;
            border-radius: 3px;
            font-weight: bold;
            text-align: center;
        }

        .alert-sell {
            background: #330000;
            color: #ff0000;
            padding: 4px 8px;
            border-radius: 3px;
            font-weight: bold;
            text-align: center;
        }

        .alert-tp {
            background: #333300;
            color: #ffff00;
            padding: 4px 8px;
            border-radius: 3px;
            font-weight: bold;
            text-align: center;
            animation: blink 1s infinite;
        }

        .alert-extreme {
            background: #330033;
            color: #ff00ff;
            padding: 4px 8px;
            border-radius: 3px;
            font-weight: bold;
            text-align: center;
            animation: blink 0.5s infinite;
        }

        .alert-monitor {
            color: #666666;
            padding: 4px 8px;
        }

        @keyframes blink {
            0%, 50%, 100% { opacity: 1; }
            25%, 75% { opacity: 0.5; }
        }

        .level {
            font-family: monospace;
            color: #00ccff;
        }

        .news-positive, .news-very.positive {
            color: #00ff00;
        }

        .news-negative, .news-very.negative {
            color: #ff0000;
        }

        .news-neutral {
            color: #888888;
        }

        .twitter-very.bullish, .twitter-bullish {
            color: #00ff00;
            font-weight: bold;
        }

        .twitter-very.bearish, .twitter-bearish {
            color: #ff0000;
            font-weight: bold;
        }

        .twitter-neutral {
            color: #888888;
        }

        .reddit-very.bullish, .reddit-bullish {
            color: #00ff00;
            font-weight: bold;
        }

        .reddit-very.bearish, .reddit-bearish {
            color: #ff0000;
            font-weight: bold;
        }

        .reddit-neutral {
            color: #888888;
        }

        .institutional-buy, .institutional-buying {
            color: #00ff00;
            font-weight: bold;
        }

        .institutional-sell, .institutional-selling {
            color: #ff0000;
            font-weight: bold;
        }

        .institutional-neutral, .institutional-mixed {
            color: #888888;
        }

        .confidence {
            font-weight: bold;
        }

        .confidence.high {
            color: #00ff00;
        }

        .confidence.medium {
            color: #ffff00;
        }

        .confidence.low {
            color: #ff6600;
        }

        .entry-targets {
            font-size: 10px;
            color: #00ccff;
            line-height: 1.4;
        }

        .refresh-btn {
            background: #00ff00;
            color: #000;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            font-weight: bold;
            font-family: inherit;
            border-radius: 3px;
        }

        .refresh-btn:hover {
            background: #00cc00;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 14px;
            color: #ffff00;
        }

        .error {
            background: #330000;
            color: #ff0000;
            padding: 20px;
            text-align: center;
            border: 1px solid #ff0000;
            margin: 20px;
        }

        .regime-warning {
            background: #330033;
            border: 2px solid #ff00ff;
            padding: 10px;
            margin-bottom: 10px;
            text-align: center;
            font-weight: bold;
            color: #ff00ff;
            animation: blink 1s infinite;
        }

        .social-volume {
            font-size: 9px;
            color: #666;
        }

        .social-volume.high {
            color: #ffff00;
        }

        .social-volume.very-high {
            color: #ff6600;
        }
    </style>
</head>
<body>
    <div class="header">
        <div>
            <h1>⚡ PROFESSIONAL TRADING DASHBOARD v3.3 ⚡</h1>
            <div style="font-size: 10px; color: #666; margin-top: 4px;" id="symbolList">
                Loading watchlist...
            </div>
        </div>
        <div style="text-align: right;">
            <div class="market-time" id="marketTime">--:--:-- ET</div>
            <div class="market-status closed" id="marketStatus">MARKET CLOSED</div>
            <div class="controls" style="margin-top: 8px;">
                <span class="watchlist-info" id="watchlistInfo">Watchlist: --</span>
                <span class="update-indicator" id="updateIndicator">Updated: --:--</span>
                <button class="sound-toggle" id="soundToggle">
                    🔇 SOUND OFF
                </button>
                <button class="sound-toggle" id="testAlertBtn" style="background: #330033; border-color: #8b5cf6;">
                    🧪 TEST ALERT
                </button>
                <span class="notification-status" id="notificationStatus" onclick="requestNotificationPermission()">NOTIFICATIONS: OFF</span>
                <button class="refresh-btn" onclick="window.location.href='leveraged_dashboard.html'" style="background: #003366; border: 1px solid #00ccff; color: #00ccff;">
                    📊 LEVERAGED CALC
                </button>
                <button class="refresh-btn" id="refreshBtn">REFRESH NOW</button>
            </div>
        </div>
    </div>

    <div id="regimeWarning" style="display: none;" class="regime-warning"></div>

    <div class="table-container">
        <table id="dataTable">
            <thead>
                <tr>
                    <th>SYMBOL</th>
                    <th>PRICE</th>
                    <th>VWAP</th>
                    <th>CAMARILLA</th>
                    <th>SUP/RES</th>
                    <th>1H BIAS</th>
                    <th>DAILY BIAS</th>
                    <th>DARK POOL</th>
                    <th>OPTIONS</th>
                    <th>NEWS</th>
                    <th>🐦 TWITTER</th>
                    <th>🤖 REDDIT</th>
                    <th>ENTRY/TP/SL</th>
                    <th>ALERT</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <tr>
                    <td colspan="14" class="loading">LOADING WATCHLIST...</td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        let SYMBOLS = [];
        const API_BASE = 'http://localhost:5001/api';
        
        let soundEnabled = false;
        let notificationsEnabled = false;
        let audioContext = null;
        let previousData = {};
        let previousAlerts = {};
        let isFirstLoad = true;

        async function loadWatchlist() {
            try {
                const response = await fetch(`${API_BASE}/watchlist`);
                const data = await response.json();
                
                if (data.symbols && data.symbols.length > 0) {
                    SYMBOLS = data.symbols;
                    document.getElementById('watchlistInfo').textContent = `Watchlist: ${SYMBOLS.length} symbols`;
                    document.getElementById('symbolList').textContent = SYMBOLS.join(' | ');
                    console.log(`✅ Loaded ${SYMBOLS.length} symbols from watchlist:`, SYMBOLS);
                    return true;
                } else {
                    console.warn('⚠️ No symbols in watchlist, using defaults');
                    SYMBOLS = ['SPY', 'QQQ', 'NVDA', 'TSLA', 'AAPL', 'PLTR', 'ORCL'];
                    document.getElementById('symbolList').textContent = SYMBOLS.join(' | ') + ' (DEFAULT)';
                    return false;
                }
            } catch (error) {
                console.error('❌ Error loading watchlist:', error);
                SYMBOLS = ['SPY', 'QQQ', 'NVDA', 'TSLA', 'AAPL', 'PLTR', 'ORCL'];
                document.getElementById('symbolList').textContent = SYMBOLS.join(' | ') + ' (DEFAULT - ERROR)';
                return false;
            }
        }

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
        }

        function playAlertSound(alertType) {
            if (!soundEnabled || !audioContext) return;

            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            if (alertType.includes('STRONG')) {
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.1);

                setTimeout(() => {
                    const osc2 = audioContext.createOscillator();
                    const gain2 = audioContext.createGain();
                    osc2.connect(gain2);
                    gain2.connect(audioContext.destination);
                    osc2.frequency.setValueAtTime(800, audioContext.currentTime);
                    gain2.gain.setValueAtTime(0.3, audioContext.currentTime);
                    gain2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
                    osc2.start(audioContext.currentTime);
                    osc2.stop(audioContext.currentTime + 0.1);
                }, 150);

            } else if (alertType.includes('SHIFT')) {
                oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(300, audioContext.currentTime + 0.3);
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.3);

            } else if (alertType.includes('EXTREME')) {
                for (let i = 0; i < 3; i++) {
                    setTimeout(() => {
                        const osc = audioContext.createOscillator();
                        const gain = audioContext.createGain();
                        osc.connect(gain);
                        gain.connect(audioContext.destination);
                        osc.frequency.setValueAtTime(1000, audioContext.currentTime);
                        gain.gain.setValueAtTime(0.4, audioContext.currentTime);
                        gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.08);
                        osc.start(audioContext.currentTime);
                        osc.stop(audioContext.currentTime + 0.08);
                    }, i * 100);
                }

            } else if (!alertType.includes('MONITOR') && !alertType.includes('WAIT')) {
                oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.2);
            }
        }

        function showNotification(symbol, alertType, confidence) {
            if (!notificationsEnabled) return;

            const icon = alertType.includes('BUY') ? '🟢' : alertType.includes('SELL') ? '🔴' : '⚠️';
            const title = `${icon} ${symbol} - ${alertType}`;
            const body = confidence ? `Confidence: ${confidence}%` : 'Check dashboard for details';

            if (Notification.permission === 'granted') {
                const notification = new Notification(title, {
                    body: body,
                    icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="75" font-size="75">📊</text></svg>',
                    requireInteraction: false,
                    tag: symbol
                });

                notification.onclick = function() {
                    window.focus();
                    this.close();
                };

                setTimeout(() => notification.close(), 10000);
            }
        }

        async function requestNotificationPermission() {
            if ('Notification' in window && Notification.permission === 'default') {
                const permission = await Notification.requestPermission();
                updateNotificationStatus();
                return permission === 'granted';
            }
            return Notification.permission === 'granted';
        }

        function updateNotificationStatus() {
            const statusEl = document.getElementById('notificationStatus');
            if ('Notification' in window && Notification.permission === 'granted') {
                notificationsEnabled = true;
                statusEl.textContent = 'NOTIFICATIONS: ON';
                statusEl.classList.add('enabled');
            } else {
                notificationsEnabled = false;
                statusEl.textContent = 'NOTIFICATIONS: OFF';
                statusEl.classList.remove('enabled');
            }
        }

        document.getElementById('soundToggle').addEventListener('click', function() {
            initAudio();
            soundEnabled = !soundEnabled;
            this.textContent = soundEnabled ? '🔊 SOUND ON' : '🔇 SOUND OFF';
            this.classList.toggle('active', soundEnabled);
        });

        document.getElementById('testAlertBtn').addEventListener('click', function() {
            initAudio();
            playAlertSound('STRONG BUY');
            showNotification('TEST', 'STRONG BUY', 95);
        });

        document.getElementById('refreshBtn').addEventListener('click', loadData);

        function updateTime() {
            const now = new Date();
            const et = new Date(now.toLocaleString('en-US', { timeZone: 'America/New_York' }));
            const timeStr = et.toLocaleTimeString('en-US', { hour12: false });
            document.getElementById('marketTime').textContent = timeStr + ' ET';

            const day = et.getDay();
            const hour = et.getHours();
            const minute = et.getMinutes();
            const currentMinutes = hour * 60 + minute;

            const isWeekday = day >= 1 && day <= 5;
            const marketOpen = 9 * 60 + 30;
            const marketClose = 16 * 60;

            const isOpen = isWeekday && currentMinutes >= marketOpen && currentMinutes < marketClose;

            const statusEl = document.getElementById('marketStatus');
            if (isOpen) {
                statusEl.textContent = 'MARKET OPEN';
                statusEl.className = 'market-status open';
            } else if (isWeekday && currentMinutes >= 4 * 60 && currentMinutes < marketOpen) {
                statusEl.textContent = 'PRE-MARKET';
                statusEl.className = 'market-status open';
            } else {
                statusEl.textContent = 'MARKET CLOSED';
                statusEl.className = 'market-status closed';
            }
        }

        function formatPrice(price) {
            return price > 0 ? `$${price.toFixed(2)}` : '--';
        }

        function getBiasClass(bias) {
            if (bias === 'BULLISH') return 'bullish';
            if (bias === 'BEARISH') return 'bearish';
            return 'neutral';
        }

        function getSocialClass(sentiment) {
            const lower = (sentiment || '').toLowerCase().replace(/\s+/g, '.');
            if (lower.includes('bullish')) return `twitter-${lower}`;
            if (lower.includes('bearish')) return `twitter-${lower}`;
            return 'twitter-neutral';
        }

        function getRedditClass(sentiment) {
            const lower = (sentiment || '').toLowerCase().replace(/\s+/g, '.');
            if (lower.includes('bullish')) return `reddit-${lower}`;
            if (lower.includes('bearish')) return `reddit-${lower}`;
            return 'reddit-neutral';
        }

        function getAlertClass(alertType) {
            if (!alertType || alertType === 'MONITOR') return 'alert-monitor';
            if (alertType.includes('EXTREME') || alertType.includes('WAIT')) return 'alert-extreme';
            if (alertType.includes('BUY')) return 'alert-buy';
            if (alertType.includes('SELL')) return 'alert-sell';
            if (alertType.includes('SHIFT') || alertType.includes('PROFIT')) return 'alert-tp';
            return 'alert-monitor';
        }

        function getConfidenceClass(confidence) {
            if (confidence >= 75) return 'high';
            if (confidence >= 60) return 'medium';
            return 'low';
        }

        function getVolumeClass(volume) {
            if (volume === 'VERY HIGH') return 'social-volume very-high';
            if (volume === 'HIGH') return 'social-volume high';
            return 'social-volume';
        }

        function updateCell(cell, newContent, animated = true) {
            if (cell.innerHTML !== newContent) {
                cell.innerHTML = newContent;
                if (animated && !isFirstLoad) {
                    cell.classList.add('value-changed');
                    setTimeout(() => cell.classList.remove('value-changed'), 500);
                }
            }
        }

        function formatTwitter(twitter) {
            if (!twitter) return '<span class="twitter-neutral">--</span>';
            
            const sentiment = twitter.overall_sentiment || 'NEUTRAL';
            const volume = twitter.volume || 'LOW';
            const tweetCount = twitter.tweet_count || 0;
            const whaleSent = twitter.whale_sentiment || '';
            
            let display = `<span class="${getSocialClass(sentiment)}">${sentiment}</span>`;
            if (tweetCount > 0) {
                display += `<br><span class="${getVolumeClass(volume)}">${tweetCount} tweets</span>`;
            }
            if (whaleSent && whaleSent !== 'NEUTRAL') {
                display += `<br><span style="color: #ffa500; font-size: 9px;">🐋 ${whaleSent}</span>`;
            }
            
            return display;
        }

        function formatReddit(reddit) {
            if (!reddit) return '<span class="reddit-neutral">--</span>';
            
            const sentiment = reddit.overall_sentiment || 'NEUTRAL';
            const volume = reddit.volume || 'LOW';
            const postCount = reddit.post_count || 0;
            const wsbSent = reddit.wsb_sentiment || '';
            
            let display = `<span class="${getRedditClass(sentiment)}">${sentiment}</span>`;
            if (postCount > 0) {
                display += `<br><span class="${getVolumeClass(volume)}">${postCount} posts</span>`;
            }
            if (wsbSent && wsbSent !== 'NONE') {
                display += `<br><span style="color: #ff4500; font-size: 9px;">WSB: ${wsbSent}</span>`;
            }
            
            return display;
        }

        function updateRow(symbol, data) {
            let row = document.querySelector(`tr[data-symbol="${symbol}"]`);
            
            if (!row) {
                const tbody = document.getElementById('tableBody');
                if (tbody.children[0]?.colSpan === 14) {
                    tbody.innerHTML = '';
                }
                row = document.createElement('tr');
                row.setAttribute('data-symbol', symbol);
                row.innerHTML = '<td></td>'.repeat(14);
                tbody.appendChild(row);
            }

            const cells = row.children;
            const camarilla = data.camarilla || {};
            const entryTargets = data.entry_targets || {};

            updateCell(cells[0], `<span class="symbol">${data.symbol}</span>`, false);
            updateCell(cells[1], `<span class="price">${formatPrice(data.current_price)}</span>`);
            updateCell(cells[2], `<span class="level">${formatPrice(data.vwap)}</span>`);
            updateCell(cells[3], `<span class="level" style="line-height: 1.4;">R4: ${formatPrice(camarilla.R4)}<br>R3: ${formatPrice(camarilla.R3)}<br>S3: ${formatPrice(camarilla.S3)}<br>S4: ${formatPrice(camarilla.S4)}</span>`);
            updateCell(cells[4], `<span class="level" style="line-height: 1.4;">RES: ${formatPrice(data.resistance)}<br>SUP: ${formatPrice(data.support)}</span>`);
            updateCell(cells[5], `<span class="${getBiasClass(data.bias_1h)}">${data.bias_1h || '--'}</span>`);
            updateCell(cells[6], `<span class="${getBiasClass(data.bias_daily)}">${data.bias_daily || '--'}</span>`);
            updateCell(cells[7], `<span class="institutional-${(data.dark_pool_activity || 'neutral').toLowerCase()}">${data.dark_pool_activity || '--'}</span>`);
            updateCell(cells[8], `<span class="${getBiasClass(data.options_sentiment)}">${data.options_sentiment || '--'}</span>`);
            updateCell(cells[9], `<span class="news-${(data.news_sentiment || 'neutral').toLowerCase().replace(/\s+/g, '.')}">${data.news_sentiment || '--'}</span>`);
            
            // Twitter column
            updateCell(cells[10], formatTwitter(data.twitter));
            
            // Reddit column
            updateCell(cells[11], formatReddit(data.reddit));
            
            const entryInfo = entryTargets.entry ? 
                `E: ${formatPrice(entryTargets.entry)}<br>TP: ${formatPrice(entryTargets.tp1)}<br>SL: ${formatPrice(entryTargets.stop_loss)}` : '--';
            updateCell(cells[12], `<span class="entry-targets" style="line-height: 1.4;">${entryInfo}</span>`);

            const alertClass = getAlertClass(data.alert_type);
            const currentAlert = data.alert_type || 'MONITOR';
            const previousAlert = previousAlerts[symbol] || 'MONITOR';
            const isNewAlert = currentAlert !== previousAlert && currentAlert !== 'MONITOR';
            
            const alertContent = `<span class="${alertClass}">${data.alert_type || 'MONITOR'}${data.confidence ? `<br><span class="confidence ${getConfidenceClass(data.confidence)}">${data.confidence.toFixed(0)}%</span>` : ''}</span>`;
            
            if (cells[13].innerHTML !== alertContent) {
                cells[13].innerHTML = alertContent;
                
                if (isNewAlert && !isFirstLoad) {
                    cells[13].classList.add('alert-changed');
                    setTimeout(() => cells[13].classList.remove('alert-changed'), 2000);
                    
                    playAlertSound(currentAlert);
                    showNotification(data.symbol, currentAlert, data.confidence);
                }
            }
            
            previousAlerts[symbol] = currentAlert;
        }

        async function loadData() {
            if (SYMBOLS.length === 0) {
                console.log('⏳ Waiting for watchlist to load...');
                return;
            }

            const indicator = document.getElementById('updateIndicator');
            indicator.textContent = 'Updating...';
            indicator.classList.add('updating');

            try {
                const promises = SYMBOLS.map(symbol => 
                    fetch(`${API_BASE}/analyze/${symbol}`)
                        .then(r => r.json())
                        .catch(e => ({ symbol, error: e.message }))
                );

                const results = await Promise.all(promises);
                
                let extremeRegimeDetected = false;
                let regimeMessage = '';
                
                for (const data of results) {
                    if (data.market_regime === 'EXTREME_BEARISH') {
                        extremeRegimeDetected = true;
                        regimeMessage = '🚨 EXTREME BEARISH REGIME DETECTED - MARKET CRASH MODE - NO BUY SIGNALS';
                        break;
                    } else if (data.market_regime === 'EXTREME_BULLISH') {
                        extremeRegimeDetected = true;
                        regimeMessage = '🚨 EXTREME BULLISH REGIME DETECTED - EUPHORIA MODE - NO SELL SIGNALS';
                        break;
                    }
                }
                
                const regimeWarning = document.getElementById('regimeWarning');
                if (extremeRegimeDetected) {
                    regimeWarning.textContent = regimeMessage;
                    regimeWarning.style.display = 'block';
                } else {
                    regimeWarning.style.display = 'none';
                }

                results.forEach(data => {
                    if (!data.error) {
                        updateRow(data.symbol, data);
                    }
                });

                const now = new Date();
                const timeStr = now.toLocaleTimeString('en-US', { hour12: false });
                indicator.textContent = `Updated: ${timeStr}`;
                indicator.classList.remove('updating');
                
                isFirstLoad = false;

            } catch (error) {
                indicator.textContent = 'Update failed';
                indicator.classList.remove('updating');
                console.error('Error loading data:', error);
            }
        }

        async function initialize() {
            console.log('🚀 Initializing Professional Trading Dashboard v3.3');
            
            await loadWatchlist();
            
            setInterval(updateTime, 1000);
            updateTime();
            updateNotificationStatus();

            await loadData();
            
            setInterval(loadData, 30000);

            setTimeout(() => {
                if ('Notification' in window && Notification.permission === 'default') {
                    requestNotificationPermission();
                }
            }, 2000);
            
            console.log('✅ Dashboard initialized with', SYMBOLS.length, 'symbols');
        }

        initialize();
    </script>
</body>
</html>